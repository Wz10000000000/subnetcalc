AC_INIT([SubNetCalc], [1.5.0], [dreib@iem.uni-due.de])

AM_INIT_AUTOMAKE
AC_PREREQ(2.60)

AC_CONFIG_MACRO_DIR([m4])
AC_CONFIG_HEADERS([config.h:config.in])
AC_CONFIG_SRCDIR([src/subnetcalc.cc])

LT_INIT
AC_PROG_CC
AC_PROG_CXX


# ###### Networking declarations ############################################
AC_CHECK_HEADERS(sys/types.h sys/socket.h netinet/in.h netinet/sctp.h)

AC_MSG_CHECKING(for socklen_t)
AC_TRY_COMPILE([#ifdef HAVE_SYS_TYPES_H
                #include <sys/types.h>
                #endif
                #include <sys/socket.h>],
               [socklen_t x = 1; return 0;],
               [AC_MSG_RESULT(yes)],
               [AC_MSG_RESULT(int)
                AC_DEFINE(socklen_t, int, [Define a type for socklen_t.])])

AC_MSG_CHECKING(if stderr is a variable of type FILE* and not a macro)
AC_TRY_COMPILE([#include <stdio.h>],
               [FILE** stdlog = &stderr],
               [AC_DEFINE(HAVE_STDERR_FILEPTR, 1, "Define to 1 if stderr is a pointer.")
                AC_MSG_RESULT(yes)],
               [AC_MSG_RESULT(no)])

AC_CHECK_MEMBER(struct sockaddr_in.sin_len,
                AC_DEFINE(HAVE_SIN_LEN, 1, [Define this if your IPv4 has sin_len in sockaddr_in struct.]),,
                [#ifdef HAVE_SYS_TYPES_H
                 #include <sys/types.h>
                 #endif
                 #include <netinet/in.h>])

AC_CHECK_MEMBER(struct sockaddr_in6.sin6_len,
                AC_DEFINE(HAVE_SIN6_LEN, 1, [Define this if your IPv6 has sin6_len in sockaddr_in6 struct.]),,
                [#ifdef HAVE_SYS_TYPES_H
                 #include <sys/types.h>
                 #endif
                 #include <netinet/in.h>])

AC_CHECK_FUNCS(socket, , AC_CHECK_LIB(socket, socket))


# ###### Check for IEEE-754 complient float-point handling ##################
AC_MSG_CHECKING([for floating point type])
AC_TRY_RUN([
#include <stdio.h>

union DoubleIntUnion
{
   double             Double;
   unsigned long long Integer;
};


/*
void hexdump(const void* ptr, const size_t length)
{
   const unsigned char* cptr = (const unsigned char*)ptr;
   size_t               i;

   for(i = 0;i < length;i++) {
      printf("%02x ", cptr[i]);
   }
   puts("");
}
*/

int main ()
{
   union DoubleIntUnion value;

   value.Double = 0.0;

   if(value.Integer != 0ULL) {
      /* puts("Math is non-IEEE (check 1)!\n"); */
      return(1);
   }

   value.Double = 1000.5;
   if(value.Integer != 0x408f440000000000ULL) {
      /* puts("Math is non-IEEE (check 2)!\n"); */
      return(1);
   }

   value.Double = -1000.5;
   if(value.Integer != 0xc08f440000000000ULL) {
      /* puts("Math is non-IEEE (check 3)!\n"); */
      return(1);
   }

   /* puts("Math is IEEE\n"); */
   return(0);
}
], IEEEFP=ok, IEEEFP=broken, IEEEFP=cross)


case $IEEEFP in
ok)
    AC_MSG_RESULT(IEEE)
    AC_DEFINE(HAVE_IEEE_FP, 1, [IEEE compliant float-point handling])
    ;;
cross)
    AC_MSG_RESULT([cross-compiling, assuming IEEE])
    AC_DEFINE(HAVE_IEEE_FP)
    ;;
*|broken)
    AC_MSG_RESULT([non IEEE])
    ;;
esac


# ###### Needed for tools.cc ################################################
CFLAGS="$CFLAGS -DHAVE_KERNEL_SCTP"
CXXFLAGS="$CXXFLAGS -DHAVE_KERNEL_SCTP"


# ###### Makefiles ##########################################################
AC_CONFIG_FILES([Makefile src/Makefile])
AC_OUTPUT
